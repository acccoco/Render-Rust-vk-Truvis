/* automatically generated by rust-bindgen 0.71.1 */

#![allow(clippy::all)]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub type Uint = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Float2 {
        pub x: f32,
        pub y: f32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Float2"][::std::mem::size_of::<Float2>() - 8usize];
        ["Alignment of Float2"][::std::mem::align_of::<Float2>() - 4usize];
        ["Offset of field: Float2::x"][::std::mem::offset_of!(Float2, x) - 0usize];
        ["Offset of field: Float2::y"][::std::mem::offset_of!(Float2, y) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Float3 {
        pub x: f32,
        pub y: f32,
        pub z: f32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Float3"][::std::mem::size_of::<Float3>() - 12usize];
        ["Alignment of Float3"][::std::mem::align_of::<Float3>() - 4usize];
        ["Offset of field: Float3::x"][::std::mem::offset_of!(Float3, x) - 0usize];
        ["Offset of field: Float3::y"][::std::mem::offset_of!(Float3, y) - 4usize];
        ["Offset of field: Float3::z"][::std::mem::offset_of!(Float3, z) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Float4 {
        pub x: f32,
        pub y: f32,
        pub z: f32,
        pub w: f32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Float4"][::std::mem::size_of::<Float4>() - 16usize];
        ["Alignment of Float4"][::std::mem::align_of::<Float4>() - 4usize];
        ["Offset of field: Float4::x"][::std::mem::offset_of!(Float4, x) - 0usize];
        ["Offset of field: Float4::y"][::std::mem::offset_of!(Float4, y) - 4usize];
        ["Offset of field: Float4::z"][::std::mem::offset_of!(Float4, z) - 8usize];
        ["Offset of field: Float4::w"][::std::mem::offset_of!(Float4, w) - 12usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Float4x4 {
        pub col0: root::Float4,
        pub col1: root::Float4,
        pub col2: root::Float4,
        pub col3: root::Float4,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Float4x4"][::std::mem::size_of::<Float4x4>() - 64usize];
        ["Alignment of Float4x4"][::std::mem::align_of::<Float4x4>() - 4usize];
        ["Offset of field: Float4x4::col0"][::std::mem::offset_of!(Float4x4, col0) - 0usize];
        ["Offset of field: Float4x4::col1"][::std::mem::offset_of!(Float4x4, col1) - 16usize];
        ["Offset of field: Float4x4::col2"][::std::mem::offset_of!(Float4x4, col2) - 32usize];
        ["Offset of field: Float4x4::col3"][::std::mem::offset_of!(Float4x4, col3) - 48usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Int2 {
        pub x: ::std::os::raw::c_int,
        pub y: ::std::os::raw::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Int2"][::std::mem::size_of::<Int2>() - 8usize];
        ["Alignment of Int2"][::std::mem::align_of::<Int2>() - 4usize];
        ["Offset of field: Int2::x"][::std::mem::offset_of!(Int2, x) - 0usize];
        ["Offset of field: Int2::y"][::std::mem::offset_of!(Int2, y) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Int3 {
        pub x: ::std::os::raw::c_int,
        pub y: ::std::os::raw::c_int,
        pub z: ::std::os::raw::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Int3"][::std::mem::size_of::<Int3>() - 12usize];
        ["Alignment of Int3"][::std::mem::align_of::<Int3>() - 4usize];
        ["Offset of field: Int3::x"][::std::mem::offset_of!(Int3, x) - 0usize];
        ["Offset of field: Int3::y"][::std::mem::offset_of!(Int3, y) - 4usize];
        ["Offset of field: Int3::z"][::std::mem::offset_of!(Int3, z) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Int4 {
        pub x: ::std::os::raw::c_int,
        pub y: ::std::os::raw::c_int,
        pub z: ::std::os::raw::c_int,
        pub w: ::std::os::raw::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Int4"][::std::mem::size_of::<Int4>() - 16usize];
        ["Alignment of Int4"][::std::mem::align_of::<Int4>() - 4usize];
        ["Offset of field: Int4::x"][::std::mem::offset_of!(Int4, x) - 0usize];
        ["Offset of field: Int4::y"][::std::mem::offset_of!(Int4, y) - 4usize];
        ["Offset of field: Int4::z"][::std::mem::offset_of!(Int4, z) - 8usize];
        ["Offset of field: Int4::w"][::std::mem::offset_of!(Int4, w) - 12usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Uint2 {
        pub x: root::Uint,
        pub y: root::Uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Uint2"][::std::mem::size_of::<Uint2>() - 8usize];
        ["Alignment of Uint2"][::std::mem::align_of::<Uint2>() - 4usize];
        ["Offset of field: Uint2::x"][::std::mem::offset_of!(Uint2, x) - 0usize];
        ["Offset of field: Uint2::y"][::std::mem::offset_of!(Uint2, y) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Uint3 {
        pub x: root::Uint,
        pub y: root::Uint,
        pub z: root::Uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Uint3"][::std::mem::size_of::<Uint3>() - 12usize];
        ["Alignment of Uint3"][::std::mem::align_of::<Uint3>() - 4usize];
        ["Offset of field: Uint3::x"][::std::mem::offset_of!(Uint3, x) - 0usize];
        ["Offset of field: Uint3::y"][::std::mem::offset_of!(Uint3, y) - 4usize];
        ["Offset of field: Uint3::z"][::std::mem::offset_of!(Uint3, z) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Uint4 {
        pub x: root::Uint,
        pub y: root::Uint,
        pub z: root::Uint,
        pub w: root::Uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Uint4"][::std::mem::size_of::<Uint4>() - 16usize];
        ["Alignment of Uint4"][::std::mem::align_of::<Uint4>() - 4usize];
        ["Offset of field: Uint4::x"][::std::mem::offset_of!(Uint4, x) - 0usize];
        ["Offset of field: Uint4::y"][::std::mem::offset_of!(Uint4, y) - 4usize];
        ["Offset of field: Uint4::z"][::std::mem::offset_of!(Uint4, z) - 8usize];
        ["Offset of field: Uint4::w"][::std::mem::offset_of!(Uint4, w) - 12usize];
    };
    pub const INVALID_TEX_ID: ::std::os::raw::c_int = -1;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct TextureHandle {
        #[doc = " 纹理的索引"]
        pub index: ::std::os::raw::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of TextureHandle"][::std::mem::size_of::<TextureHandle>() - 4usize];
        ["Alignment of TextureHandle"][::std::mem::align_of::<TextureHandle>() - 4usize];
        ["Offset of field: TextureHandle::index"][::std::mem::offset_of!(TextureHandle, index) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct ImageHandle {
        #[doc = " 纹理的索引"]
        pub index: ::std::os::raw::c_int,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of ImageHandle"][::std::mem::size_of::<ImageHandle>() - 4usize];
        ["Alignment of ImageHandle"][::std::mem::align_of::<ImageHandle>() - 4usize];
        ["Offset of field: ImageHandle::index"][::std::mem::offset_of!(ImageHandle, index) - 0usize];
    };
    #[doc = " 渲染需要的一些公用参数，每帧更新"]
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct PerFrameData {
        pub projection: root::Float4x4,
        pub view: root::Float4x4,
        pub inv_view: root::Float4x4,
        pub inv_projection: root::Float4x4,
        pub camera_pos: root::Float3,
        pub time_ms: f32,
        pub camera_forward: root::Float3,
        pub delta_time_ms: f32,
        pub mouse_pos: root::Float2,
        pub resolution: root::Float2,
        pub frame_id: u64,
        #[doc = " 累计的帧数"]
        pub accum_frames: root::Uint,
        pub _padding_0: root::Uint,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of PerFrameData"][::std::mem::size_of::<PerFrameData>() - 320usize];
        ["Alignment of PerFrameData"][::std::mem::align_of::<PerFrameData>() - 8usize];
        ["Offset of field: PerFrameData::projection"][::std::mem::offset_of!(PerFrameData, projection) - 0usize];
        ["Offset of field: PerFrameData::view"][::std::mem::offset_of!(PerFrameData, view) - 64usize];
        ["Offset of field: PerFrameData::inv_view"][::std::mem::offset_of!(PerFrameData, inv_view) - 128usize];
        ["Offset of field: PerFrameData::inv_projection"]
            [::std::mem::offset_of!(PerFrameData, inv_projection) - 192usize];
        ["Offset of field: PerFrameData::camera_pos"][::std::mem::offset_of!(PerFrameData, camera_pos) - 256usize];
        ["Offset of field: PerFrameData::time_ms"][::std::mem::offset_of!(PerFrameData, time_ms) - 268usize];
        ["Offset of field: PerFrameData::camera_forward"]
            [::std::mem::offset_of!(PerFrameData, camera_forward) - 272usize];
        ["Offset of field: PerFrameData::delta_time_ms"]
            [::std::mem::offset_of!(PerFrameData, delta_time_ms) - 284usize];
        ["Offset of field: PerFrameData::mouse_pos"][::std::mem::offset_of!(PerFrameData, mouse_pos) - 288usize];
        ["Offset of field: PerFrameData::resolution"][::std::mem::offset_of!(PerFrameData, resolution) - 296usize];
        ["Offset of field: PerFrameData::frame_id"][::std::mem::offset_of!(PerFrameData, frame_id) - 304usize];
        ["Offset of field: PerFrameData::accum_frames"][::std::mem::offset_of!(PerFrameData, accum_frames) - 312usize];
        ["Offset of field: PerFrameData::_padding_0"][::std::mem::offset_of!(PerFrameData, _padding_0) - 316usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Vertex {
        pub position: root::Float3,
        pub normal: root::Float3,
        pub tangent: root::Float3,
        pub bitangent: root::Float3,
        pub uv: root::Float2,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Vertex"][::std::mem::size_of::<Vertex>() - 56usize];
        ["Alignment of Vertex"][::std::mem::align_of::<Vertex>() - 4usize];
        ["Offset of field: Vertex::position"][::std::mem::offset_of!(Vertex, position) - 0usize];
        ["Offset of field: Vertex::normal"][::std::mem::offset_of!(Vertex, normal) - 12usize];
        ["Offset of field: Vertex::tangent"][::std::mem::offset_of!(Vertex, tangent) - 24usize];
        ["Offset of field: Vertex::bitangent"][::std::mem::offset_of!(Vertex, bitangent) - 36usize];
        ["Offset of field: Vertex::uv"][::std::mem::offset_of!(Vertex, uv) - 48usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Geometry {
        #[doc = " 这个字段就是 vertex buffer"]
        pub position_buffer: u64,
        pub index_buffer: u64,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Geometry"][::std::mem::size_of::<Geometry>() - 16usize];
        ["Alignment of Geometry"][::std::mem::align_of::<Geometry>() - 8usize];
        ["Offset of field: Geometry::position_buffer"][::std::mem::offset_of!(Geometry, position_buffer) - 0usize];
        ["Offset of field: Geometry::index_buffer"][::std::mem::offset_of!(Geometry, index_buffer) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct NewGeometry {
        pub position_buffer: u64,
        pub normal_buffer: u64,
        pub tangent_buffer: u64,
        pub uv_buffer: u64,
        pub index_buffer: u64,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of NewGeometry"][::std::mem::size_of::<NewGeometry>() - 40usize];
        ["Alignment of NewGeometry"][::std::mem::align_of::<NewGeometry>() - 8usize];
        ["Offset of field: NewGeometry::position_buffer"]
            [::std::mem::offset_of!(NewGeometry, position_buffer) - 0usize];
        ["Offset of field: NewGeometry::normal_buffer"][::std::mem::offset_of!(NewGeometry, normal_buffer) - 8usize];
        ["Offset of field: NewGeometry::tangent_buffer"][::std::mem::offset_of!(NewGeometry, tangent_buffer) - 16usize];
        ["Offset of field: NewGeometry::uv_buffer"][::std::mem::offset_of!(NewGeometry, uv_buffer) - 24usize];
        ["Offset of field: NewGeometry::index_buffer"][::std::mem::offset_of!(NewGeometry, index_buffer) - 32usize];
    };
    #[doc = " 单个点光源"]
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct PointLight {
        pub pos: root::Float3,
        pub _pos_padding: f32,
        pub color: root::Float3,
        pub _color_padding: f32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of PointLight"][::std::mem::size_of::<PointLight>() - 32usize];
        ["Alignment of PointLight"][::std::mem::align_of::<PointLight>() - 4usize];
        ["Offset of field: PointLight::pos"][::std::mem::offset_of!(PointLight, pos) - 0usize];
        ["Offset of field: PointLight::_pos_padding"][::std::mem::offset_of!(PointLight, _pos_padding) - 12usize];
        ["Offset of field: PointLight::color"][::std::mem::offset_of!(PointLight, color) - 16usize];
        ["Offset of field: PointLight::_color_padding"][::std::mem::offset_of!(PointLight, _color_padding) - 28usize];
    };
    #[doc = " 单个 spot light"]
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct SpotLight {
        pub pos: root::Float3,
        pub inner_angle: f32,
        pub color: root::Float3,
        pub outer_angle: f32,
        pub dir: root::Float3,
        pub _dir_padding: f32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of SpotLight"][::std::mem::size_of::<SpotLight>() - 48usize];
        ["Alignment of SpotLight"][::std::mem::align_of::<SpotLight>() - 4usize];
        ["Offset of field: SpotLight::pos"][::std::mem::offset_of!(SpotLight, pos) - 0usize];
        ["Offset of field: SpotLight::inner_angle"][::std::mem::offset_of!(SpotLight, inner_angle) - 12usize];
        ["Offset of field: SpotLight::color"][::std::mem::offset_of!(SpotLight, color) - 16usize];
        ["Offset of field: SpotLight::outer_angle"][::std::mem::offset_of!(SpotLight, outer_angle) - 28usize];
        ["Offset of field: SpotLight::dir"][::std::mem::offset_of!(SpotLight, dir) - 32usize];
        ["Offset of field: SpotLight::_dir_padding"][::std::mem::offset_of!(SpotLight, _dir_padding) - 44usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct PBRMaterial {
        pub base_color: root::Float3,
        pub metallic: f32,
        pub emissive: root::Float3,
        pub roughness: f32,
        pub diffuse_map: root::TextureHandle,
        pub normal_map: root::TextureHandle,
        pub opaque: f32,
        pub _padding_1: f32,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of PBRMaterial"][::std::mem::size_of::<PBRMaterial>() - 48usize];
        ["Alignment of PBRMaterial"][::std::mem::align_of::<PBRMaterial>() - 4usize];
        ["Offset of field: PBRMaterial::base_color"][::std::mem::offset_of!(PBRMaterial, base_color) - 0usize];
        ["Offset of field: PBRMaterial::metallic"][::std::mem::offset_of!(PBRMaterial, metallic) - 12usize];
        ["Offset of field: PBRMaterial::emissive"][::std::mem::offset_of!(PBRMaterial, emissive) - 16usize];
        ["Offset of field: PBRMaterial::roughness"][::std::mem::offset_of!(PBRMaterial, roughness) - 28usize];
        ["Offset of field: PBRMaterial::diffuse_map"][::std::mem::offset_of!(PBRMaterial, diffuse_map) - 32usize];
        ["Offset of field: PBRMaterial::normal_map"][::std::mem::offset_of!(PBRMaterial, normal_map) - 36usize];
        ["Offset of field: PBRMaterial::opaque"][::std::mem::offset_of!(PBRMaterial, opaque) - 40usize];
        ["Offset of field: PBRMaterial::_padding_1"][::std::mem::offset_of!(PBRMaterial, _padding_1) - 44usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Instance {
        pub geometry_indirect_idx: root::Uint,
        pub geometry_count: root::Uint,
        pub material_indirect_idx: root::Uint,
        pub material_count: root::Uint,
        pub model: root::Float4x4,
        pub inv_model: root::Float4x4,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Instance"][::std::mem::size_of::<Instance>() - 144usize];
        ["Alignment of Instance"][::std::mem::align_of::<Instance>() - 4usize];
        ["Offset of field: Instance::geometry_indirect_idx"]
            [::std::mem::offset_of!(Instance, geometry_indirect_idx) - 0usize];
        ["Offset of field: Instance::geometry_count"][::std::mem::offset_of!(Instance, geometry_count) - 4usize];
        ["Offset of field: Instance::material_indirect_idx"]
            [::std::mem::offset_of!(Instance, material_indirect_idx) - 8usize];
        ["Offset of field: Instance::material_count"][::std::mem::offset_of!(Instance, material_count) - 12usize];
        ["Offset of field: Instance::model"][::std::mem::offset_of!(Instance, model) - 16usize];
        ["Offset of field: Instance::inv_model"][::std::mem::offset_of!(Instance, inv_model) - 80usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
    pub struct Scene {
        pub all_mats: u64,
        pub all_geometries: u64,
        pub instance_material_map: u64,
        pub instance_geometry_map: u64,
        pub point_lights: u64,
        pub spot_lights: u64,
        pub all_instances: u64,
        pub tlas: u64,
        pub point_light_count: root::Uint,
        pub spot_light_count: root::Uint,
        pub sky: root::TextureHandle,
        pub uv_checker: root::TextureHandle,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Scene"][::std::mem::size_of::<Scene>() - 80usize];
        ["Alignment of Scene"][::std::mem::align_of::<Scene>() - 8usize];
        ["Offset of field: Scene::all_mats"][::std::mem::offset_of!(Scene, all_mats) - 0usize];
        ["Offset of field: Scene::all_geometries"][::std::mem::offset_of!(Scene, all_geometries) - 8usize];
        ["Offset of field: Scene::instance_material_map"]
            [::std::mem::offset_of!(Scene, instance_material_map) - 16usize];
        ["Offset of field: Scene::instance_geometry_map"]
            [::std::mem::offset_of!(Scene, instance_geometry_map) - 24usize];
        ["Offset of field: Scene::point_lights"][::std::mem::offset_of!(Scene, point_lights) - 32usize];
        ["Offset of field: Scene::spot_lights"][::std::mem::offset_of!(Scene, spot_lights) - 40usize];
        ["Offset of field: Scene::all_instances"][::std::mem::offset_of!(Scene, all_instances) - 48usize];
        ["Offset of field: Scene::tlas"][::std::mem::offset_of!(Scene, tlas) - 56usize];
        ["Offset of field: Scene::point_light_count"][::std::mem::offset_of!(Scene, point_light_count) - 64usize];
        ["Offset of field: Scene::spot_light_count"][::std::mem::offset_of!(Scene, spot_light_count) - 68usize];
        ["Offset of field: Scene::sky"][::std::mem::offset_of!(Scene, sky) - 72usize];
        ["Offset of field: Scene::uv_checker"][::std::mem::offset_of!(Scene, uv_checker) - 76usize];
    };
    pub mod blit {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub const SHADER_X: ::std::os::raw::c_int = 8;
        pub const SHADER_Y: ::std::os::raw::c_int = 8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
        pub struct PushConstant {
            #[doc = " rt render"]
            pub src_image: root::ImageHandle,
            #[doc = " final image to present"]
            pub dst_image: root::ImageHandle,
            pub src_image_size: root::Uint2,
            pub offset: root::Uint2,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of PushConstant"][::std::mem::size_of::<PushConstant>() - 24usize];
            ["Alignment of PushConstant"][::std::mem::align_of::<PushConstant>() - 4usize];
            ["Offset of field: PushConstant::src_image"][::std::mem::offset_of!(PushConstant, src_image) - 0usize];
            ["Offset of field: PushConstant::dst_image"][::std::mem::offset_of!(PushConstant, dst_image) - 4usize];
            ["Offset of field: PushConstant::src_image_size"]
                [::std::mem::offset_of!(PushConstant, src_image_size) - 8usize];
            ["Offset of field: PushConstant::offset"][::std::mem::offset_of!(PushConstant, offset) - 16usize];
        };
    }
    pub mod rt {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
        pub struct PushConstants {
            pub frame_data: u64,
            pub scene: u64,
            pub rt_render_target: root::ImageHandle,
            pub spp: root::Uint,
            pub spp_idx: root::Uint,
            pub channel: root::Uint,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of PushConstants"][::std::mem::size_of::<PushConstants>() - 32usize];
            ["Alignment of PushConstants"][::std::mem::align_of::<PushConstants>() - 8usize];
            ["Offset of field: PushConstants::frame_data"][::std::mem::offset_of!(PushConstants, frame_data) - 0usize];
            ["Offset of field: PushConstants::scene"][::std::mem::offset_of!(PushConstants, scene) - 8usize];
            ["Offset of field: PushConstants::rt_render_target"]
                [::std::mem::offset_of!(PushConstants, rt_render_target) - 16usize];
            ["Offset of field: PushConstants::spp"][::std::mem::offset_of!(PushConstants, spp) - 20usize];
            ["Offset of field: PushConstants::spp_idx"][::std::mem::offset_of!(PushConstants, spp_idx) - 24usize];
            ["Offset of field: PushConstants::channel"][::std::mem::offset_of!(PushConstants, channel) - 28usize];
        };
    }
    pub mod imgui {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
        pub struct PushConstant {
            pub ortho: root::Float4x4,
            pub texture: root::TextureHandle,
            pub _padding_0: ::std::os::raw::c_int,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of PushConstant"][::std::mem::size_of::<PushConstant>() - 72usize];
            ["Alignment of PushConstant"][::std::mem::align_of::<PushConstant>() - 4usize];
            ["Offset of field: PushConstant::ortho"][::std::mem::offset_of!(PushConstant, ortho) - 0usize];
            ["Offset of field: PushConstant::texture"][::std::mem::offset_of!(PushConstant, texture) - 64usize];
            ["Offset of field: PushConstant::_padding_0"][::std::mem::offset_of!(PushConstant, _padding_0) - 68usize];
        };
    }
    pub mod raster {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
        pub struct PushConstants {
            pub frame_data: u64,
            pub scene: u64,
            #[doc = " raster only"]
            pub instance_idx: root::Uint,
            #[doc = " raster only"]
            pub submesh_idx: root::Uint,
            pub _padding_1: root::Uint,
            pub _padding_2: root::Uint,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of PushConstants"][::std::mem::size_of::<PushConstants>() - 32usize];
            ["Alignment of PushConstants"][::std::mem::align_of::<PushConstants>() - 8usize];
            ["Offset of field: PushConstants::frame_data"][::std::mem::offset_of!(PushConstants, frame_data) - 0usize];
            ["Offset of field: PushConstants::scene"][::std::mem::offset_of!(PushConstants, scene) - 8usize];
            ["Offset of field: PushConstants::instance_idx"]
                [::std::mem::offset_of!(PushConstants, instance_idx) - 16usize];
            ["Offset of field: PushConstants::submesh_idx"]
                [::std::mem::offset_of!(PushConstants, submesh_idx) - 20usize];
            ["Offset of field: PushConstants::_padding_1"][::std::mem::offset_of!(PushConstants, _padding_1) - 24usize];
            ["Offset of field: PushConstants::_padding_2"][::std::mem::offset_of!(PushConstants, _padding_2) - 28usize];
        };
    }
    pub mod sdr {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub const SHADER_X: ::std::os::raw::c_int = 8;
        pub const SHADER_Y: ::std::os::raw::c_int = 8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, bytemuck :: Pod, bytemuck :: Zeroable)]
        pub struct PushConstant {
            pub src_image: root::ImageHandle,
            pub dst_image: root::ImageHandle,
            pub image_size: root::Uint2,
            pub channel: root::Uint,
            pub _padding_1: root::Uint,
        }
        #[allow(clippy::unnecessary_operation, clippy::identity_op)]
        const _: () = {
            ["Size of PushConstant"][::std::mem::size_of::<PushConstant>() - 24usize];
            ["Alignment of PushConstant"][::std::mem::align_of::<PushConstant>() - 4usize];
            ["Offset of field: PushConstant::src_image"][::std::mem::offset_of!(PushConstant, src_image) - 0usize];
            ["Offset of field: PushConstant::dst_image"][::std::mem::offset_of!(PushConstant, dst_image) - 4usize];
            ["Offset of field: PushConstant::image_size"][::std::mem::offset_of!(PushConstant, image_size) - 8usize];
            ["Offset of field: PushConstant::channel"][::std::mem::offset_of!(PushConstant, channel) - 16usize];
            ["Offset of field: PushConstant::_padding_1"][::std::mem::offset_of!(PushConstant, _padding_1) - 20usize];
        };
    }
}
