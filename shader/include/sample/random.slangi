#pragma once

struct Random
{
    uint seed;
    __init(uint a, uint b)
    {
        seed = tea(a, b);
    }

    [mutating]
    float next()
    {
        return rnd(seed);
    }

    // 生成随机数的初始种子
    // Generate a random unsigned int from two unsigned int values, using 16 pairs
    // of rounds of the Tiny Encryption Algorithm. See Zafar, Olano, and Curtis,
    // "GPU Random Numbers via the Tiny Encryption Algorithm"
    static uint tea(uint v0, uint v1)
    {
        uint s0 = 0;

        for (uint n = 0; n < 16; n++)
        {
            s0 += 0x9e3779b9;
            v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
            v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
        }

        return v0;
    }

    // Generate a random unsigned int in [0, 2^24) given the pre_seedious RNG state
    // using the Numerical Recipes linear congruential generator
    static uint lcg(inout uint pre_seed)
    {
        uint LCG_A = 1664525u;
        uint LCG_C = 1013904223u;
        pre_seed = (LCG_A * pre_seed + LCG_C);
        return pre_seed & 0x00FFFFFF;
    }

    // Generate a random float in [0, 1) given the pre_seedious RNG state
    static float rnd(inout uint pre_seed)
    {
        return (float(lcg(pre_seed)) / float(0x01000000));
    }
};
