#pragma once
#include "bindless.slangi"
#include "geometry.slangi"
#include "light.slangi"
#include "material.slangi"
#include "ptr.slangi"

struct Instance
{
    uint geometry_indirect_idx;
    uint geometry_count;
    uint material_indirect_idx;
    uint material_count;

    float4x4 model;
    float4x4 inv_model;
};

struct Scene
{
    PTR(PBRMaterial, all_mats);
    PTR(Geometry, all_geometries);

    PTR(uint, instance_material_map);
    PTR(uint, instance_geometry_map);

    PTR(PointLight, point_lights);
    PTR(SpotLight, spot_lights);

    PTR(Instance, all_instances);
    PTR(RaytracingAccelerationStructure, tlas);

    uint point_light_count;
    uint spot_light_count;
    TextureHandle sky;
    TextureHandle uv_checker;

#ifdef __SLANG__

    /// 根据 instance idx 和 submesh idx 获取 geometry
    Geometry *get_geometry(uint instance_idx, uint submesh_idx)
    {
        Instance *instance = all_instances + instance_idx;
        uint geometry_map_idx = instance->geometry_indirect_idx + submesh_idx;
        uint geometry_idx = instance_geometry_map[geometry_map_idx];
        Geometry *geometry = all_geometries + geometry_idx;
        return geometry;
    }

    /// 根据 instance idx 和 submesh idx 获取 material
    PBRMaterial *get_material(uint instance_idx, uint submesh_idx)
    {
        Instance *instance = all_instances + instance_idx;
        uint material_map_idx = instance->material_indirect_idx + submesh_idx;
        uint material_idx = instance_material_map[material_map_idx];
        PBRMaterial *material = all_mats + material_idx;
        return material;
    }

    Instance *get_instance(uint instance_idx)
    {
        Instance *instance = all_instances + instance_idx;
        return instance;
    }

#endif
};

