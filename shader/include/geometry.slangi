#pragma once
#include "ptr.slangi"

struct Vertex
{
    float3 position;
    float3 normal;
    float3 tangent;
    float3 bitangent;
    float2 uv;
};

struct Geometry
{
    /// 这个字段就是 vertex buffer
    PTR(Vertex, position_buffer);
    PTR(uint, index_buffer);

#ifdef __SLANG__

    /// 从 vertex buffer 中获取顶点
    [ForceInline]
    Vertex *get_vertex(uint vertex_idx)
    {
        return position_buffer + vertex_idx;
    }

    /// 根据 primitive id，获取对应的三角形的三个顶点
    /// @return 可以使用这三个索引，到 vertex buffer 中获取顶点
    [ForceInline]
    uint3 get_triangle(uint primive_id)
    {
        uint index0 = index_buffer[primive_id * 3 + 0];
        uint index1 = index_buffer[primive_id * 3 + 1];
        uint index2 = index_buffer[primive_id * 3 + 2];
        return uint3(index0, index1, index2);
    }

    /// 根据插值系数，得到插值后的顶点
    /// @return normal 并没有 normalized
    Vertex get_interp_vertex(uint primive_id, float2 barycentrics)
    {
        uint3 triangle = get_triangle(primive_id);
        Vertex *A = get_vertex(triangle.x);
        Vertex *B = get_vertex(triangle.y);
        Vertex *C = get_vertex(triangle.z);

        const float a = 1.f - barycentrics.x - barycentrics.y;
        const float b = barycentrics.x;
        const float c = barycentrics.y;

        Vertex vertex;
        vertex.position = A->position * a + B->position * b + C->position * c;
        vertex.normal = A->normal * a + B->normal * b + C->normal * c;
        vertex.tangent = A->tangent * a + B->tangent * b + C->tangent * c;
        vertex.bitangent = A->bitangent * a + B->bitangent * b + C->bitangent * c;
        vertex.uv = A->uv * a + B->uv * b + C->uv * c;
        return vertex;
    }

#endif
};
