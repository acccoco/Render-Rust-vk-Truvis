/* automatically generated by rust-bindgen 0.71.1 */

#[doc = " 4 字节对齐"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CxxVec2f {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxVec2f"][::std::mem::size_of::<CxxVec2f>() - 8usize];
    ["Alignment of CxxVec2f"][::std::mem::align_of::<CxxVec2f>() - 4usize];
    ["Offset of field: CxxVec2f::x"][::std::mem::offset_of!(CxxVec2f, x) - 0usize];
    ["Offset of field: CxxVec2f::y"][::std::mem::offset_of!(CxxVec2f, y) - 4usize];
};
#[doc = " 4 字节对齐"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CxxVec3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxVec3f"][::std::mem::size_of::<CxxVec3f>() - 12usize];
    ["Alignment of CxxVec3f"][::std::mem::align_of::<CxxVec3f>() - 4usize];
    ["Offset of field: CxxVec3f::x"][::std::mem::offset_of!(CxxVec3f, x) - 0usize];
    ["Offset of field: CxxVec3f::y"][::std::mem::offset_of!(CxxVec3f, y) - 4usize];
    ["Offset of field: CxxVec3f::z"][::std::mem::offset_of!(CxxVec3f, z) - 8usize];
};
#[doc = " 4 字节对齐"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CxxVec4f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxVec4f"][::std::mem::size_of::<CxxVec4f>() - 16usize];
    ["Alignment of CxxVec4f"][::std::mem::align_of::<CxxVec4f>() - 4usize];
    ["Offset of field: CxxVec4f::x"][::std::mem::offset_of!(CxxVec4f, x) - 0usize];
    ["Offset of field: CxxVec4f::y"][::std::mem::offset_of!(CxxVec4f, y) - 4usize];
    ["Offset of field: CxxVec4f::z"][::std::mem::offset_of!(CxxVec4f, z) - 8usize];
    ["Offset of field: CxxVec4f::w"][::std::mem::offset_of!(CxxVec4f, w) - 12usize];
};
#[doc = " 4x4 矩阵结构体 (列主序)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CxxMat4f {
    pub m: [f32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxMat4f"][::std::mem::size_of::<CxxMat4f>() - 64usize];
    ["Alignment of CxxMat4f"][::std::mem::align_of::<CxxMat4f>() - 4usize];
    ["Offset of field: CxxMat4f::m"][::std::mem::offset_of!(CxxMat4f, m) - 0usize];
};
#[doc = " 三角形面结构体"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CxxTriangleFace {
    pub a: ::std::os::raw::c_uint,
    pub b: ::std::os::raw::c_uint,
    pub c: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxTriangleFace"][::std::mem::size_of::<CxxTriangleFace>() - 12usize];
    ["Alignment of CxxTriangleFace"][::std::mem::align_of::<CxxTriangleFace>() - 4usize];
    ["Offset of field: CxxTriangleFace::a"][::std::mem::offset_of!(CxxTriangleFace, a) - 0usize];
    ["Offset of field: CxxTriangleFace::b"][::std::mem::offset_of!(CxxTriangleFace, b) - 4usize];
    ["Offset of field: CxxTriangleFace::c"][::std::mem::offset_of!(CxxTriangleFace, c) - 8usize];
};
#[doc = " 顶点结构体"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CxxVertex3D {
    pub position: CxxVec3f,
    pub normal: CxxVec3f,
    pub tangent: CxxVec3f,
    pub bitangent: CxxVec3f,
    pub uv: CxxVec2f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxVertex3D"][::std::mem::size_of::<CxxVertex3D>() - 56usize];
    ["Alignment of CxxVertex3D"][::std::mem::align_of::<CxxVertex3D>() - 4usize];
    ["Offset of field: CxxVertex3D::position"][::std::mem::offset_of!(CxxVertex3D, position) - 0usize];
    ["Offset of field: CxxVertex3D::normal"][::std::mem::offset_of!(CxxVertex3D, normal) - 12usize];
    ["Offset of field: CxxVertex3D::tangent"][::std::mem::offset_of!(CxxVertex3D, tangent) - 24usize];
    ["Offset of field: CxxVertex3D::bitangent"][::std::mem::offset_of!(CxxVertex3D, bitangent) - 36usize];
    ["Offset of field: CxxVertex3D::uv"][::std::mem::offset_of!(CxxVertex3D, uv) - 48usize];
};
#[doc = " 适合光栅化的几何体结构体，以 AoS(Array of Struct) 的形式组织"]
#[repr(C)]
#[derive(Debug)]
pub struct CxxRasterGeometry {
    pub vertex_cnt_: ::std::os::raw::c_uint,
    pub vertex_array_: *mut CxxVertex3D,
    pub face_cnt_: ::std::os::raw::c_uint,
    pub face_array_: *mut CxxTriangleFace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxRasterGeometry"][::std::mem::size_of::<CxxRasterGeometry>() - 32usize];
    ["Alignment of CxxRasterGeometry"][::std::mem::align_of::<CxxRasterGeometry>() - 8usize];
    ["Offset of field: CxxRasterGeometry::vertex_cnt_"]
        [::std::mem::offset_of!(CxxRasterGeometry, vertex_cnt_) - 0usize];
    ["Offset of field: CxxRasterGeometry::vertex_array_"]
        [::std::mem::offset_of!(CxxRasterGeometry, vertex_array_) - 8usize];
    ["Offset of field: CxxRasterGeometry::face_cnt_"][::std::mem::offset_of!(CxxRasterGeometry, face_cnt_) - 16usize];
    ["Offset of field: CxxRasterGeometry::face_array_"]
        [::std::mem::offset_of!(CxxRasterGeometry, face_array_) - 24usize];
};
#[doc = " 材质结构体"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CxxMaterial {
    pub ambient: CxxVec4f,
    pub diffuse: CxxVec4f,
    pub specular: CxxVec4f,
    pub emission: CxxVec4f,
    #[doc = " 字符串使用 C 风格字符数组，确保以 null 结尾"]
    pub diffuse_map: [::std::os::raw::c_char; 256usize],
    pub ambient_map: [::std::os::raw::c_char; 256usize],
    pub emissive_map: [::std::os::raw::c_char; 256usize],
    pub specular_map: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxMaterial"][::std::mem::size_of::<CxxMaterial>() - 1088usize];
    ["Alignment of CxxMaterial"][::std::mem::align_of::<CxxMaterial>() - 4usize];
    ["Offset of field: CxxMaterial::ambient"][::std::mem::offset_of!(CxxMaterial, ambient) - 0usize];
    ["Offset of field: CxxMaterial::diffuse"][::std::mem::offset_of!(CxxMaterial, diffuse) - 16usize];
    ["Offset of field: CxxMaterial::specular"][::std::mem::offset_of!(CxxMaterial, specular) - 32usize];
    ["Offset of field: CxxMaterial::emission"][::std::mem::offset_of!(CxxMaterial, emission) - 48usize];
    ["Offset of field: CxxMaterial::diffuse_map"][::std::mem::offset_of!(CxxMaterial, diffuse_map) - 64usize];
    ["Offset of field: CxxMaterial::ambient_map"][::std::mem::offset_of!(CxxMaterial, ambient_map) - 320usize];
    ["Offset of field: CxxMaterial::emissive_map"][::std::mem::offset_of!(CxxMaterial, emissive_map) - 576usize];
    ["Offset of field: CxxMaterial::specular_map"][::std::mem::offset_of!(CxxMaterial, specular_map) - 832usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct CxxInstance {
    #[doc = " 坐标系：右手系，X-Right，Y-Up"]
    pub world_transform: CxxMat4f,
    #[doc = " 几何体索引数量"]
    pub mesh_cnt_: ::std::os::raw::c_uint,
    pub mat_indices_: *mut ::std::os::raw::c_uint,
    pub mesh_indices_: *mut ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CxxInstance"][::std::mem::size_of::<CxxInstance>() - 88usize];
    ["Alignment of CxxInstance"][::std::mem::align_of::<CxxInstance>() - 8usize];
    ["Offset of field: CxxInstance::world_transform"][::std::mem::offset_of!(CxxInstance, world_transform) - 0usize];
    ["Offset of field: CxxInstance::mesh_cnt_"][::std::mem::offset_of!(CxxInstance, mesh_cnt_) - 64usize];
    ["Offset of field: CxxInstance::mat_indices_"][::std::mem::offset_of!(CxxInstance, mat_indices_) - 72usize];
    ["Offset of field: CxxInstance::mesh_indices_"][::std::mem::offset_of!(CxxInstance, mesh_indices_) - 80usize];
};
unsafe extern "C" {
    pub fn load_scene(mesh_path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free_scene(loader: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn get_mesh_cnt(loader: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn get_mat_cnt(loader: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn get_instance_cnt(loader: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn get_instance(loader: *mut ::std::os::raw::c_void, idx: usize) -> *const CxxInstance;
}
unsafe extern "C" {
    pub fn get_mesh(loader: *mut ::std::os::raw::c_void, idx: usize) -> *const CxxRasterGeometry;
}
unsafe extern "C" {
    pub fn get_mat(loader: *mut ::std::os::raw::c_void, idx: usize) -> *const CxxMaterial;
}
